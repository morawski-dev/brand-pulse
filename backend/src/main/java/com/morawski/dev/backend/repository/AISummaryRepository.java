package com.morawski.dev.backend.repository;

import com.morawski.dev.backend.entity.AISummary;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.Instant;
import java.util.List;
import java.util.Optional;

/**
 * Repository interface for AISummary entity.
 * Provides data access methods for AI-generated review summaries.
 *
 * User Stories:
 * - US-004: Viewing Aggregated Reviews (AI text summary)
 *
 * API Endpoints:
 * - GET /api/dashboard/summary (includes AI summary)
 * - GET /api/dashboard/summary/ai
 *
 * AI summaries are cached with expiration to balance freshness and API costs.
 * Typical validity period: 24-48 hours.
 */
@Repository
public interface AISummaryRepository extends JpaRepository<AISummary, Long> {

    /**
     * Find the most recent valid (not expired) AI summary for a review source.
     * Used to retrieve cached summary without regenerating.
     *
     * API: GET /api/dashboard/summary
     * API: GET /api/dashboard/summary/ai?sourceId=X
     *
     * @param reviewSourceId the review source ID
     * @param now current timestamp
     * @return Optional containing valid summary if exists
     */
    @Query("SELECT ai FROM AISummary ai WHERE ai.reviewSource.id = :reviewSourceId " +
           "AND (ai.validUntil IS NULL OR ai.validUntil > :now) " +
           "ORDER BY ai.generatedAt DESC LIMIT 1")
    Optional<AISummary> findValidSummaryByReviewSourceId(
            @Param("reviewSourceId") Long reviewSourceId,
            @Param("now") Instant now
    );

    /**
     * Find the most recent AI summary (regardless of validity) for a review source.
     * Used when no valid summary exists to check when last summary was generated.
     *
     * @param reviewSourceId the review source ID
     * @return Optional containing most recent summary
     */
    @Query("SELECT ai FROM AISummary ai WHERE ai.reviewSource.id = :reviewSourceId " +
           "ORDER BY ai.generatedAt DESC LIMIT 1")
    Optional<AISummary> findLatestSummaryByReviewSourceId(@Param("reviewSourceId") Long reviewSourceId);

    /**
     * Find all AI summaries for a review source.
     * Used for summary history and debugging.
     *
     * @param reviewSourceId the review source ID
     * @return list of summaries ordered by generation date (newest first)
     */
    @Query("SELECT ai FROM AISummary ai WHERE ai.reviewSource.id = :reviewSourceId " +
           "ORDER BY ai.generatedAt DESC")
    List<AISummary> findByReviewSourceIdOrderByGeneratedAtDesc(@Param("reviewSourceId") Long reviewSourceId);

    /**
     * Find all expired summaries that need regeneration.
     * Used by background job to refresh stale summaries.
     *
     * @param now current timestamp
     * @return list of expired summaries
     */
    @Query("SELECT ai FROM AISummary ai WHERE ai.validUntil IS NOT NULL " +
           "AND ai.validUntil <= :now ORDER BY ai.validUntil ASC")
    List<AISummary> findExpiredSummaries(@Param("now") Instant now);

    /**
     * Find summaries generated within a specific date range.
     * Used for analytics and cost tracking.
     *
     * @param startDate start of date range
     * @param endDate end of date range
     * @return list of summaries generated in date range
     */
    @Query("SELECT ai FROM AISummary ai WHERE ai.generatedAt >= :startDate " +
           "AND ai.generatedAt <= :endDate ORDER BY ai.generatedAt DESC")
    List<AISummary> findByGeneratedAtBetween(
            @Param("startDate") Instant startDate,
            @Param("endDate") Instant endDate
    );

    /**
     * Find summaries by AI model used.
     * Used for A/B testing different models and quality analysis.
     *
     * @param modelUsed the AI model name (e.g., "anthropic/claude-3-haiku")
     * @return list of summaries generated by specified model
     */
    @Query("SELECT ai FROM AISummary ai WHERE ai.modelUsed = :modelUsed " +
           "ORDER BY ai.generatedAt DESC")
    List<AISummary> findByModelUsed(@Param("modelUsed") String modelUsed);

    /**
     * Calculate total token count for a review source.
     * Used for cost analysis and optimization.
     *
     * @param reviewSourceId the review source ID
     * @return total tokens used for summaries
     */
    @Query("SELECT SUM(ai.tokenCount) FROM AISummary ai WHERE ai.reviewSource.id = :reviewSourceId")
    Long calculateTotalTokensByReviewSourceId(@Param("reviewSourceId") Long reviewSourceId);

    /**
     * Calculate total token count for a date range.
     * Used for monthly/weekly cost tracking.
     *
     * @param startDate start of date range
     * @param endDate end of date range
     * @return total tokens used in date range
     */
    @Query("SELECT SUM(ai.tokenCount) FROM AISummary ai WHERE ai.generatedAt >= :startDate " +
           "AND ai.generatedAt <= :endDate")
    Long calculateTotalTokensByDateRange(
            @Param("startDate") Instant startDate,
            @Param("endDate") Instant endDate
    );

    /**
     * Calculate average token count per summary for a model.
     * Used for model efficiency comparison.
     *
     * @param modelUsed the AI model name
     * @return average tokens per summary
     */
    @Query("SELECT AVG(ai.tokenCount) FROM AISummary ai WHERE ai.modelUsed = :modelUsed")
    Double calculateAverageTokensByModel(@Param("modelUsed") String modelUsed);

    /**
     * Count summaries for a review source.
     * Used for usage analytics.
     *
     * @param reviewSourceId the review source ID
     * @return count of summaries
     */
    @Query("SELECT COUNT(ai) FROM AISummary ai WHERE ai.reviewSource.id = :reviewSourceId")
    long countByReviewSourceId(@Param("reviewSourceId") Long reviewSourceId);

    /**
     * Delete old summaries beyond retention period.
     * Used for data cleanup (e.g., keep only last 30 days of summary history).
     *
     * @param cutoffDate summaries generated before this date will be deleted
     */
    @Query("DELETE FROM AISummary ai WHERE ai.generatedAt < :cutoffDate")
    void deleteSummariesBeforeDate(@Param("cutoffDate") Instant cutoffDate);

    /**
     * Check if a valid summary exists for a review source.
     * Quick check to determine if regeneration is needed.
     *
     * @param reviewSourceId the review source ID
     * @param now current timestamp
     * @return true if valid summary exists
     */
    @Query("SELECT CASE WHEN COUNT(ai) > 0 THEN true ELSE false END " +
           "FROM AISummary ai WHERE ai.reviewSource.id = :reviewSourceId " +
           "AND (ai.validUntil IS NULL OR ai.validUntil > :now)")
    boolean hasValidSummary(@Param("reviewSourceId") Long reviewSourceId, @Param("now") Instant now);

    /**
     * Find all summaries for a brand (across all sources).
     * Used for brand-level analytics.
     *
     * @param brandId the brand ID
     * @return list of summaries for all brand's sources
     */
    @Query("SELECT ai FROM AISummary ai WHERE ai.reviewSource.brand.id = :brandId " +
           "ORDER BY ai.generatedAt DESC")
    List<AISummary> findByBrandId(@Param("brandId") Long brandId);

    /**
     * Find summaries that will expire soon (within next N hours).
     * Used for proactive regeneration scheduling.
     *
     * @param now current timestamp
     * @param expirationThreshold timestamp threshold (e.g., now + 2 hours)
     * @return list of summaries expiring soon
     */
    @Query("SELECT ai FROM AISummary ai WHERE ai.validUntil IS NOT NULL " +
           "AND ai.validUntil > :now AND ai.validUntil <= :expirationThreshold " +
           "ORDER BY ai.validUntil ASC")
    List<AISummary> findSummariesExpiringSoon(
            @Param("now") Instant now,
            @Param("expirationThreshold") Instant expirationThreshold
    );
}
